#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define MAX_LENGTH 100

const char uppercase[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const char lowercase[] = "abcdefghijklmnopqrstuvwxyz";
const char numbers[] = "0123456789";
const char special[] = "!@#$%^&*()_+-=[]{}|;:,.<>?/";

// Function to swap characters
void swap(char *a, char *b) {
    char temp = *a;
    *a = *b;
    *b = temp;
}

// Function to shuffle a string
void shuffle(char *str, int len) {
    for (int i = len - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        swap(&str[i], &str[j]);
    }
}

// Password strength checker
void checkStrength(int length, int useUpper, int useLower, int useNumber, int useSpecial) {
    int score = 0;
    if (length >= 12) score++;
    if (useUpper && useLower) score++;
    if (useNumber) score++;
    if (useSpecial) score++;

    printf("Password Strength: ");
    if (score <= 1) printf("Weak\n");
    else if (score == 2) printf("Moderate\n");
    else printf("Strong\n");
}

void generatePassword(int length, int useUpper, int useLower, int useNumber, int useSpecial) {
    if (!useUpper && !useLower && !useNumber && !useSpecial) {
        printf("You must select at least one character type!\n");
        return;
    }

    if (length < (useUpper + useLower + useNumber + useSpecial)) {
        printf("Password length must be at least equal to the number of selected character types!\n");
        return;
    }

    char password[MAX_LENGTH];
    int pos = 0;

    // Ensure at least one character from each selected type
    if (useUpper) password[pos++] = uppercase[rand() % strlen(uppercase)];
    if (useLower) password[pos++] = lowercase[rand() % strlen(lowercase)];
    if (useNumber) password[pos++] = numbers[rand() % strlen(numbers)];
    if (useSpecial) password[pos++] = special[rand() % strlen(special)];

    // Pool of allowed characters
    char allowed[MAX_LENGTH] = "";
    if (useUpper) strcat(allowed, uppercase);
    if (useLower) strcat(allowed, lowercase);
    if (useNumber) strcat(allowed, numbers);
    if (useSpecial) strcat(allowed, special);

    int poolLen = strlen(allowed);
    for (int i = pos; i < length; i++) {
        password[i] = allowed[rand() % poolLen];
    }

    // Shuffle the final password
    shuffle(password, length);
    password[length] = '\0';

    printf("Generated Password: %s\n", password);
    checkStrength(length, useUpper, useLower, useNumber, useSpecial);
}

int main() {
    int length;
    int useUpper, useLower, useNumber, useSpecial;

    srand(time(0));

    printf("==== Secure Password Generator ====\n");
    printf("Enter desired password length (max %d): ", MAX_LENGTH);
    scanf("%d", &length);

    printf("Include Uppercase Letters? (1 = Yes, 0 = No): ");
    scanf("%d", &useUpper);
    printf("Include Lowercase Letters? (1 = Yes, 0 = No): ");
    scanf("%d", &useLower);
    printf("Include Numbers? (1 = Yes, 0 = No): ");
    scanf("%d", &useNumber);
    printf("Include Special Characters? (1 = Yes, 0 = No): ");
    scanf("%d", &useSpecial);

    generatePassword(length, useUpper, useLower, useNumber, useSpecial);

    return 0;
}
